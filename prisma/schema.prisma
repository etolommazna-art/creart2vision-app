generator client { provider = "prisma-client-js" }
datasource db { provider = "sqlite" url = env("DATABASE_URL") }

enum Role { ADMIN USER }
model User { id String @id @default(cuid()) email String @unique passwordHash String? role Role @default(ADMIN) sessions Session[] }
model Session { id String @id @default(cuid()) sessionToken String @unique userId String expires DateTime user User @relation(fields:[userId], references:[id], onDelete: Cascade) }
model VerificationToken { identifier String token String @unique expires DateTime @@unique([identifier, token]) }

enum GalleryType { MARIAGE GROSSESSE CORPORATE AUTRE }
enum ViewBy { CLIENT GUEST }

model Gallery {
  id          String   @id @default(cuid())
  title       String
  type        GalleryType @default(AUTRE)
  clientName  String
  clientEmail String?
  token       String   @unique
  guestToken  String   @unique
  clientRequireCode Boolean @default(false)
  clientAccessCode  String?
  guestRequireCode  Boolean @default(false)
  guestAccessCode   String?
  createdAt   DateTime @default(now())
  assets      Asset[]
  views       AssetView[]
}

model Asset {
  id        String   @id @default(cuid())
  gallery   Gallery  @relation(fields:[galleryId], references:[id], onDelete: Cascade)
  galleryId String
  filename  String
  key       String
  keySd     String?
  order     Int @default(0)
  hiddenFromGuests Boolean @default(false)
  views     AssetView[]
}

model AssetView {
  id        String   @id @default(cuid())
  gallery   Gallery  @relation(fields:[galleryId], references:[id], onDelete: Cascade)
  galleryId String
  asset     Asset    @relation(fields:[assetId], references:[id], onDelete: Cascade)
  assetId   String
  by        ViewBy @default(CLIENT)
  viewerToken String?
  createdAt DateTime @default(now())
}

model Contact {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  bookings  Booking[]
}

model ServiceCategory { id String @id @default(cuid()) name String services Service[] }
model Service {
  id String @id @default(cuid())
  name String
  category ServiceCategory? @relation(fields:[categoryId], references:[id], onDelete: SetNull)
  categoryId String?
  plans ServicePlan[]
}
model ServicePlan { id String @id @default(cuid()) service Service @relation(fields:[serviceId], references:[id], onDelete: Cascade) serviceId String name String description String? durationMinutes Int priceCents Int }
enum BookingStatus { PENDING CONFIRMED CANCELED }
model Booking {
  id String @id @default(cuid())
  service Service @relation(fields:[serviceId], references:[id], onDelete: Cascade)
  serviceId String
  plan ServicePlan? @relation(fields:[planId], references:[id], onDelete: SetNull)
  planId String?
  contact Contact? @relation(fields:[contactId], references:[id], onDelete: SetNull)
  contactId String?
  name String
  email String
  start DateTime
  end   DateTime
  status BookingStatus @default(CONFIRMED)
  createdAt DateTime @default(now())
}

model Invoice {
  id String @id @default(cuid())
  number String @unique
  contact Contact? @relation(fields:[contactId], references:[id], onDelete: SetNull)
  contactId String?
  amountCents Int
  currency String @default("EUR")
  createdAt DateTime @default(now())
}
