// --------------------------------------
// Prisma 5 — Configuration
// --------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------
// Auth.js v5 (next-auth v5 beta)
// --------------------------------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String

  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// --------------------------------------
// Galerie minimale (compatible avec ton app)
// --------------------------------------
enum GalleryType {
  MARRIAGE
  GROSSESSE
  CORPORATE
  OTHER
}

model Gallery {
  id                String      @id @default(cuid())
  title             String
  type              GalleryType @default(OTHER)

  token             String      @unique
  guestToken        String      @unique

  clientRequireCode Boolean     @default(false)
  clientAccessCode  String?
  guestRequireCode  Boolean     @default(false)
  guestAccessCode   String?

  clientName        String
  clientEmail       String?

  createdAt         DateTime    @default(now())

  assets            Asset[]
  views             AssetView[]
}

model Asset {
  id         String   @id @default(cuid())
  galleryId  String
  key        String   // clé/chemin S3
  filename   String
  mime       String?
  size       Int?
  createdAt  DateTime @default(now())

  gallery    Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  views      AssetView[]
}

enum ViewerType {
  CLIENT
  GUEST
}

model AssetView {
  id          String     @id @default(cuid())
  assetId     String
  viewedAt    DateTime   @default(now())
  viewerType  ViewerType
  viewerEmail String?

  asset       Asset      @relation(fields: [assetId], references: [id], onDelete: Cascade)
}
